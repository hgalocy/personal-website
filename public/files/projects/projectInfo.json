{
    "pinball": {
        "title": "Basys3 Pinball",
        "gitLink": "https://github.com/hgalocy/pinball_basys3",
        "recent": 1,
        "fav":1,
        "pics": ["files/projects/pinball/pinballMain.png",
                 "files/projects/pinball/blockDiagram.png",
                 "files/projects/pinball/buzzer.png",
                 "files/projects/pinball/dad.jpg"],
        "captions": {
            "mainDesc": "For my final project in CompE470L at SDSU, I created a pinball game using a Basys3, Verilog, a speaker, and a VGA cable. I experimented with “Pong” games people created online and eventually morphed it into my pinball game complete with scoring, flippers, a sound effect, tilting, and targets. As I was creating the game, I found that there were situations in which the game could become slow or I felt that, as a user, I couldn’t manipulate the ball as much as I liked. Because of this, I added a moving target and the tilting capability. If you are familiar with physical pinball games, you’re aware that the ball can sink down the middle resulting in a lost ball regardless of how you use your flippers. To remedy this, pinball players will bump or “tilt” the machine to try to get the ball on a different trajectory. In the case of my game, a user can “tilt” causing the ball to switch it’s horizontal trajectory to the other direction.",
            "blockDiagram": "I have labeled all the inputs and outputs for each module and their respective number of bits.",
            "buzzer": "I connected the speaker to the Basys3 board as shown so that it would play when points are scored.",
            "dad": "My inspiration for creating a virtual pinball came from my dad. He raised me a gamer and always encouraged me to play his arcade and pinball games."
        },
        "readMe": "I made a virtual pinball game for a Basys3 FPGA board in verilog HDL. After synthesizing, implementing, and generating bitstream given my code and constraints file with Vivado,the game is playable once the Basys3 is connected to a monitor with a VGA cable and a buzzer is wired."
    },
    "pancake":{
        "title": "Electron.js GUI for Pancake",
        "gitLink": "https://github.com/hgalocy/Senior-Design-Software",
        "recent": 2,
        "fav": 0,
        "pics": ["files/projects/pancake/pancakeMain.png",
                 "files/projects/pancake/freq.png",
                 "files/projects/pancake/fixture.png",
                 "files/projects/pancake/diag.png",
                 "files/projects/pancake/dataPath.png"],
        "bullets": [
            "Created bed of nail test fixture for SDSU group capstone engineering project and was responsible for the software.",
            "Utilized Electron.js and Node in order to create a GUI for a simple and clean user experience.",
            "Used JSON and serial communication via USB connection to communicate back and forth with test fixture."
        ],
        "captions": {
            "mainDesc": "For my senior design project at SDSU, my group created a bed of nails fixture to test SEA-310 amplifiers quickly, efficiently and easily. The test fixture utilizes a series of tests to search for manufacturing faults, record amplifier results for analysis and produce performance metrics of the device under test (DUT) with a user-friendly interface. The DUT connects to the Pancake test fixture through DUT test points that proxy signals to the Arduino using pogo pins and a ribbon cable. Measured outputs from the test fixture get relayed to 3 unique GUI pages for further analysis/debugging. I designed and programmed the software to interface with the Pancake test fixture.",
            "freq": "A user can set the parameters on the GUI to configure the potentiometers, input level, and frequency at which to test. The results would be plotted on the shown graph and output to a .csv.",
            "fixture": "This is our fixture with the PCB to test on top and our testing PCB and Arduino hidden underneath. The pogo pins allow us to measure at the test points.",
            "diag" : "A user may set each potentiometer (Drive, Tone, or Vol) to either CW, CCW or Mid using the drop down menus on this screen. Presence is also set to ON or OFF using the last drop down menu. Finally, an amplitude and frequency can be specified. If there is an Arduino connected, the “Generate Signal” button will light green at which point the user may click it to send the command to the Arduino. If the command is successful, the GUI will display the signal information below the green button.",
            "dataPath": "This diagram shows a summary of how the logic behind our data transmission, data evaluation, and receiving data works."
        },
        "readMe": "I was responsible for the software for my senior design group project at SDSU. The main purpose of the Pancake Test Fixture was to allow users to test SEA-310 amplifiers by utilizing a series of tests to search for manufacturing faults, record amplifier results for analysis and produce performance metrics of the device under test (DUT) with a user-friendly interface."
    },
    "website":{
        "title" : "This Website",
        "gitLink": "https://github.com/hgalocy/personal-website",
        "recent": 3,
        "fav": 0,
        "pics": ["files/projects/thisWebsite/thisWebsiteMain.png", 
                 "files/projects/thisWebsite/thisWebsiteHome.png", 
                 "files/projects/thisWebsite/grad.jpg",
                 "files/projects/thisWebsite/designGroup.jpg"],
        "captions": {
            "mainDesc": "I created this website as a way for me to show I have experience with web development and to showcase myself for potential employers. This code of the entire website is available via Github. It is hosted with Netlify so that every time I push to the main branch, the published build updates.",
            "home": "I created the wireframe for this website with Figma in order to come up with the layout before I coded the styling for the website with vanilla CSS.",
            "grad": "I made this site so that I would have a website to give potential employers to look at after I graduated from SDSU in 2021.",
            "design": "I enjoyed my time at SDSU and cannot wait for what is to come!"
        },
        "readMe": "I thought a good way to show I have experience with web development would be to create a personal website. I use Netlify.com to host so that every time I push to the above Github repository, the website will update its build."
    }
}